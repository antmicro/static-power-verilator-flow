---
name: static-power-verilator-flow

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  CI_OS_NAME: linux
  CI_COMMIT: ${{ github.sha }}
  CCACHE_COMPRESS: 1
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_LIMIT_MULTIPLE: 0.95
  INSTALL_DIR: ${{ github.workspace }}/install
  RELOC_DIR: ${{ github.workspace }}/relloc

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  flow:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    name: Static power verilator flow | ${{ matrix.os }}
    env:
      CI_BUILD_STAGE_NAME: build
      CI_RUNS_ON: ${{ matrix.os }}
      CACHE_BASE_KEY: build-${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-12 gcc make flex bison help2man perl python3 libfl2 libfl-dev zlib1g zlib1g-dev ccache mold libunwind-dev libgoogle-perftools-dev numactl tcl tcl-dev swig cmake libeigen3-dev time
          pip3 install pyyaml

      - name: Fetch Verilator
        run: git clone https://github.com/antmicro/verilator -b "saif"

      - name: Build Verilator
        run: |
          cd verilator
          autoconf
          ./configure --prefix $(pwd)
          make -j $(nproc)

      - name: Fetch CUDD
        run: git clone https://github.com/davidkebo/cudd

      - name: Build CUDD
        run: |
          cd cudd/cudd_versions
          tar xvfz cudd-3.0.0.tar.gz
          cd cudd-3.0.0
          ./configure --prefix $(pwd)
          make -j $(nproc) install

      - name: Fetch OpenSTA
        run: git clone https://github.com/The-OpenROAD-Project/OpenSTA

      - name: Build OpenSTA
        run: |
          cd OpenSTA
          mkdir build && cd build
          cmake -DCUDD_DIR=$GITHUB_WORKSPACE/cudd/cudd_versions/cudd-3.0.0 ../
          make -j $(nproc)

      - name: Fetch OpenROAD-flow-scripts
        run: git clone https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts

      - name: Build OpenROAD-flow-scripts
        run: |
          cd OpenROAD-flow-scripts
          git submodule update --init --recursive tools/yosys
          cd tools/yosys
          make -j $(nproc) PREFIX=$GITHUB_WORKSPACE/OpenROAD-flow-scripts/tools/install/yosys install

      - name: Generate SAIF file from simulation trace
        run: |
          export PATH=$PATH:$(pwd)/verilator/bin/
          cd verilator/examples/saif_example/
          verilator --cc --exe --build --trace-saif -j -Wno-latch gcd.v saif_trace.cpp
          ./obj_dir/Vgcd
          cp simx.saif $GITHUB_WORKSPACE/
          cp sta_commands $GITHUB_WORKSPACE/

      - name: Prepare sources for Yosys synthesis
        run: |
          cd verilator/examples/saif_example/
          cp -r saif_trace_example $GITHUB_WORKSPACE/OpenROAD-flow-scripts/flow/designs/asap7/
          cp -r src/saif_trace_example $GITHUB_WORKSPACE/OpenROAD-flow-scripts/flow/designs/src/

      - name: Run Yosys synthesis
        run: |
          cd OpenROAD-flow-scripts
          make -C flow DESIGN_CONFIG=designs/asap7/saif_trace_example/config.mk synth

      - name: Generate power consumption report
        run: |
          export PATH=$PATH:$(pwd)/OpenSTA/app/
          export LIB_DIR=$(pwd)/OpenROAD-flow-scripts/flow/platforms/asap7/lib/NLDM/
          cp $GITHUB_WORKSPACE/simx.saif OpenROAD-flow-scripts/flow/results/asap7/saif_trace_example/base/
          cp $GITHUB_WORKSPACE/sta_commands OpenROAD-flow-scripts/flow/results/asap7/saif_trace_example/base/
          cd OpenROAD-flow-scripts/flow/results/asap7/saif_trace_example/base/
          sta sta_commands